// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	config "github.com/dangerousmonk/short-url/cmd/config"
	models "github.com/dangerousmonk/short-url/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddBatch mocks base method.
func (m *MockStorage) AddBatch(ctx context.Context, urls []models.APIBatchModel, cfg *config.Config, userID string) ([]models.APIBatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBatch", ctx, urls, cfg, userID)
	ret0, _ := ret[0].([]models.APIBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBatch indicates an expected call of AddBatch.
func (mr *MockStorageMockRecorder) AddBatch(ctx, urls, cfg, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBatch", reflect.TypeOf((*MockStorage)(nil).AddBatch), ctx, urls, cfg, userID)
}

// AddShortURL mocks base method.
func (m *MockStorage) AddShortURL(ctx context.Context, fullURL string, cfg *config.Config, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShortURL", ctx, fullURL, cfg, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddShortURL indicates an expected call of AddShortURL.
func (mr *MockStorageMockRecorder) AddShortURL(ctx, fullURL, cfg, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShortURL", reflect.TypeOf((*MockStorage)(nil).AddShortURL), ctx, fullURL, cfg, userID)
}

// GetFullURL mocks base method.
func (m *MockStorage) GetFullURL(ctx context.Context, shortURL string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullURL", ctx, shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetFullURL indicates an expected call of GetFullURL.
func (mr *MockStorageMockRecorder) GetFullURL(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullURL", reflect.TypeOf((*MockStorage)(nil).GetFullURL), ctx, shortURL)
}

// GetUsersURLs mocks base method.
func (m *MockStorage) GetUsersURLs(ctx context.Context, userId, baseURL string) ([]models.APIGetUserURLsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersURLs", ctx, userId, baseURL)
	ret0, _ := ret[0].([]models.APIGetUserURLsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersURLs indicates an expected call of GetUsersURLs.
func (mr *MockStorageMockRecorder) GetUsersURLs(ctx, userId, baseURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersURLs", reflect.TypeOf((*MockStorage)(nil).GetUsersURLs), ctx, userId, baseURL)
}

// Ping mocks base method.
func (m *MockStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping), ctx)
}
