// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	config "github.com/dangerousmonk/short-url/cmd/config"
	models "github.com/dangerousmonk/short-url/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddBatch mocks base method.
func (m *MockRepository) AddBatch(ctx context.Context, urls []models.APIBatchModel, cfg *config.Config, userID string) ([]models.APIBatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBatch", ctx, urls, cfg, userID)
	ret0, _ := ret[0].([]models.APIBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBatch indicates an expected call of AddBatch.
func (mr *MockRepositoryMockRecorder) AddBatch(ctx, urls, cfg, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBatch", reflect.TypeOf((*MockRepository)(nil).AddBatch), ctx, urls, cfg, userID)
}

// AddShortURL mocks base method.
func (m *MockRepository) AddShortURL(ctx context.Context, fullURL string, cfg *config.Config, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShortURL", ctx, fullURL, cfg, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddShortURL indicates an expected call of AddShortURL.
func (mr *MockRepositoryMockRecorder) AddShortURL(ctx, fullURL, cfg, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShortURL", reflect.TypeOf((*MockRepository)(nil).AddShortURL), ctx, fullURL, cfg, userID)
}

// DeleteBatch mocks base method.
func (m *MockRepository) DeleteBatch(ctx context.Context, urls []string, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatch", ctx, urls, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBatch indicates an expected call of DeleteBatch.
func (mr *MockRepositoryMockRecorder) DeleteBatch(ctx, urls, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MockRepository)(nil).DeleteBatch), ctx, urls, userID)
}

// GetURLData mocks base method.
func (m *MockRepository) GetURLData(ctx context.Context, shortURL string) (models.URLData, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLData", ctx, shortURL)
	ret0, _ := ret[0].(models.URLData)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetURLData indicates an expected call of GetURLData.
func (mr *MockRepositoryMockRecorder) GetURLData(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLData", reflect.TypeOf((*MockRepository)(nil).GetURLData), ctx, shortURL)
}

// GetUsersURLs mocks base method.
func (m *MockRepository) GetUsersURLs(ctx context.Context, userID, baseURL string) ([]models.APIGetUserURLsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersURLs", ctx, userID, baseURL)
	ret0, _ := ret[0].([]models.APIGetUserURLsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersURLs indicates an expected call of GetUsersURLs.
func (mr *MockRepositoryMockRecorder) GetUsersURLs(ctx, userID, baseURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersURLs", reflect.TypeOf((*MockRepository)(nil).GetUsersURLs), ctx, userID, baseURL)
}

// Ping mocks base method.
func (m *MockRepository) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRepositoryMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRepository)(nil).Ping), ctx)
}
